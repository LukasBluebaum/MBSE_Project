/*
 * generated by Xtext 2.15.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}
@parser::members {
	private MyDslGrammarAccess grammarAccess;

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleSolid
entryRuleSolid
:
{ before(grammarAccess.getSolidRule()); }
	 ruleSolid
{ after(grammarAccess.getSolidRule()); } 
	 EOF 
;

// Rule Solid
ruleSolid 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSolidAccess().getGroup()); }
		(rule__Solid__Group__0)
		{ after(grammarAccess.getSolidAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFacet
entryRuleFacet
:
{ before(grammarAccess.getFacetRule()); }
	 ruleFacet
{ after(grammarAccess.getFacetRule()); } 
	 EOF 
;

// Rule Facet
ruleFacet 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFacetAccess().getGroup()); }
		(rule__Facet__Group__0)
		{ after(grammarAccess.getFacetAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVector
entryRuleVector
:
{ before(grammarAccess.getVectorRule()); }
	 ruleVector
{ after(grammarAccess.getVectorRule()); } 
	 EOF 
;

// Rule Vector
ruleVector 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVectorAccess().getGroup()); }
		(rule__Vector__Group__0)
		{ after(grammarAccess.getVectorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Solid__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Solid__Group__0__Impl
	rule__Solid__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Solid__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSolidAccess().getSolidKeyword_0()); }
	'solid'
	{ after(grammarAccess.getSolidAccess().getSolidKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Solid__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Solid__Group__1__Impl
	rule__Solid__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Solid__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSolidAccess().getNameAssignment_1()); }
	(rule__Solid__NameAssignment_1)
	{ after(grammarAccess.getSolidAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Solid__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Solid__Group__2__Impl
	rule__Solid__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Solid__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getSolidAccess().getFacetsAssignment_2()); }
		(rule__Solid__FacetsAssignment_2)
		{ after(grammarAccess.getSolidAccess().getFacetsAssignment_2()); }
	)
	(
		{ before(grammarAccess.getSolidAccess().getFacetsAssignment_2()); }
		(rule__Solid__FacetsAssignment_2)*
		{ after(grammarAccess.getSolidAccess().getFacetsAssignment_2()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Solid__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Solid__Group__3__Impl
	rule__Solid__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Solid__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSolidAccess().getEndsolidKeyword_3()); }
	'endsolid'
	{ after(grammarAccess.getSolidAccess().getEndsolidKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Solid__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Solid__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Solid__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSolidAccess().getIDTerminalRuleCall_4()); }
	RULE_ID
	{ after(grammarAccess.getSolidAccess().getIDTerminalRuleCall_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Facet__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Facet__Group__0__Impl
	rule__Facet__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Facet__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFacetAccess().getFacetKeyword_0()); }
	'facet'
	{ after(grammarAccess.getFacetAccess().getFacetKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Facet__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Facet__Group__1__Impl
	rule__Facet__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Facet__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFacetAccess().getNormalAssignment_1()); }
	(rule__Facet__NormalAssignment_1)
	{ after(grammarAccess.getFacetAccess().getNormalAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Facet__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Facet__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Facet__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFacetAccess().getEndfacetKeyword_2()); }
	'endfacet'
	{ after(grammarAccess.getFacetAccess().getEndfacetKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Vector__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Vector__Group__0__Impl
	rule__Vector__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVectorAccess().getNormalKeyword_0()); }
	'normal'
	{ after(grammarAccess.getVectorAccess().getNormalKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Vector__Group__1__Impl
	rule__Vector__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVectorAccess().getXAssignment_1()); }
	(rule__Vector__XAssignment_1)
	{ after(grammarAccess.getVectorAccess().getXAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Vector__Group__2__Impl
	rule__Vector__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVectorAccess().getYAssignment_2()); }
	(rule__Vector__YAssignment_2)
	{ after(grammarAccess.getVectorAccess().getYAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Vector__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVectorAccess().getZAssignment_3()); }
	(rule__Vector__ZAssignment_3)
	{ after(grammarAccess.getVectorAccess().getZAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Solid__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSolidAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getSolidAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Solid__FacetsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSolidAccess().getFacetsFacetParserRuleCall_2_0()); }
		ruleFacet
		{ after(grammarAccess.getSolidAccess().getFacetsFacetParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Facet__NormalAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFacetAccess().getNormalVectorParserRuleCall_1_0()); }
		ruleVector
		{ after(grammarAccess.getFacetAccess().getNormalVectorParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__XAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVectorAccess().getXDOUBLETerminalRuleCall_1_0()); }
		RULE_DOUBLE
		{ after(grammarAccess.getVectorAccess().getXDOUBLETerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__YAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVectorAccess().getYDOUBLETerminalRuleCall_2_0()); }
		RULE_DOUBLE
		{ after(grammarAccess.getVectorAccess().getYDOUBLETerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__ZAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVectorAccess().getZDOUBLETerminalRuleCall_3_0()); }
		RULE_DOUBLE
		{ after(grammarAccess.getVectorAccess().getZDOUBLETerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_DOUBLE : ('-'|'.'|'e'|RULE_INT)+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

fragment RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
