/**
 * generated by Xtext 2.15.0
 */
package org.xtext.example.mydsl.tests;

import com.google.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.xtext.example.mydsl.myDsl.Facet;
import org.xtext.example.mydsl.myDsl.Normalvector;
import org.xtext.example.mydsl.myDsl.Solid;
import org.xtext.example.mydsl.myDsl.Vector;
import org.xtext.example.mydsl.tests.MyDslInjectorProvider;

@ExtendWith(InjectionExtension.class)
@InjectWith(MyDslInjectorProvider.class)
@SuppressWarnings("all")
public class MyDslParsingTest {
  @Inject
  private ParseHelper<Solid> parseHelper;
  
  @Test
  public void loadModel() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("solid OpenSCAD_Model");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("facet normal -0.999391 0 -0.0348995");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("outer loop");
      _builder.newLine();
      _builder.append("      ");
      _builder.append("vertex -30.4581 -5 10.3465");
      _builder.newLine();
      _builder.append("      ");
      _builder.append("vertex -30.4581 5 10.3465");
      _builder.newLine();
      _builder.append("      ");
      _builder.append("vertex -30.4568 -5.62667 10.3071");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("endloop");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("endfacet");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("facet normal -0.999391 0 -0.0348995");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("outer loop");
      _builder.newLine();
      _builder.append("      ");
      _builder.append("vertex -30.4568 -5.62667 10.3071");
      _builder.newLine();
      _builder.append("      ");
      _builder.append("vertex -30.4581 5 10.3465");
      _builder.newLine();
      _builder.append("      ");
      _builder.append("vertex -30.4568 5.62667 10.3071");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("endloop");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("endfacet");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("endsolid OpenSCAD_Model");
      _builder.newLine();
      final Solid file = this.parseHelper.parse(_builder);
      String _name = file.getName();
      String _plus = ("Name: " + _name);
      InputOutput.<String>println(_plus);
      final EList<Facet> facets = file.getFacets();
      for (final Facet x : facets) {
        {
          InputOutput.<String>println("\nFacet: ");
          final Normalvector normal = x.getNormal();
          double _x1 = normal.getX1();
          String _plus_1 = ("Normalvector: " + Double.valueOf(_x1));
          String _plus_2 = (_plus_1 + " ");
          double _x2 = normal.getX2();
          String _plus_3 = (_plus_2 + Double.valueOf(_x2));
          String _plus_4 = (_plus_3 + " ");
          double _x3 = normal.getX3();
          String _plus_5 = (_plus_4 + Double.valueOf(_x3));
          InputOutput.<String>println(_plus_5);
          final Vector v = x.getV1();
          double _x1_1 = v.getX1();
          String _plus_6 = ("Vector1 : " + Double.valueOf(_x1_1));
          String _plus_7 = (_plus_6 + " ");
          double _x2_1 = v.getX2();
          String _plus_8 = (_plus_7 + Double.valueOf(_x2_1));
          String _plus_9 = (_plus_8 + " ");
          double _x3_1 = v.getX3();
          String _plus_10 = (_plus_9 + Double.valueOf(_x3_1));
          InputOutput.<String>println(_plus_10);
          final Vector z = x.getV2();
          double _x1_2 = z.getX1();
          String _plus_11 = ("Vector2 : " + Double.valueOf(_x1_2));
          String _plus_12 = (_plus_11 + " ");
          double _x2_2 = z.getX2();
          String _plus_13 = (_plus_12 + Double.valueOf(_x2_2));
          String _plus_14 = (_plus_13 + " ");
          double _x3_2 = z.getX3();
          String _plus_15 = (_plus_14 + Double.valueOf(_x3_2));
          InputOutput.<String>println(_plus_15);
          final Vector w = x.getV3();
          double _x1_3 = w.getX1();
          String _plus_16 = ("Vector3 : " + Double.valueOf(_x1_3));
          String _plus_17 = (_plus_16 + " ");
          double _x2_3 = w.getX2();
          String _plus_18 = (_plus_17 + Double.valueOf(_x2_3));
          String _plus_19 = (_plus_18 + " ");
          double _x3_3 = w.getX3();
          String _plus_20 = (_plus_19 + Double.valueOf(_x3_3));
          InputOutput.<String>println(_plus_20);
        }
      }
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
